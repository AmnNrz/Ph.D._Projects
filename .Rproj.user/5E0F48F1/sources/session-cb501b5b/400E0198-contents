{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Wvl</th>\n",
       "      <th>Sample</th>\n",
       "      <th>Scan</th>\n",
       "      <th>Type_Name</th>\n",
       "      <th>Reflect</th>\n",
       "      <th>RWC</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>500</td>\n",
       "      <td>Soil</td>\n",
       "      <td>Scan1</td>\n",
       "      <td>Athena</td>\n",
       "      <td>1.741691</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>510</td>\n",
       "      <td>Soil</td>\n",
       "      <td>Scan1</td>\n",
       "      <td>Athena</td>\n",
       "      <td>1.814396</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>520</td>\n",
       "      <td>Soil</td>\n",
       "      <td>Scan1</td>\n",
       "      <td>Athena</td>\n",
       "      <td>1.840588</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>530</td>\n",
       "      <td>Soil</td>\n",
       "      <td>Scan1</td>\n",
       "      <td>Athena</td>\n",
       "      <td>1.893957</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>540</td>\n",
       "      <td>Soil</td>\n",
       "      <td>Scan1</td>\n",
       "      <td>Athena</td>\n",
       "      <td>1.990206</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17831</th>\n",
       "      <td>2410</td>\n",
       "      <td>Soil</td>\n",
       "      <td>Scan9</td>\n",
       "      <td>Shano</td>\n",
       "      <td>51.931447</td>\n",
       "      <td>0.075516</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17832</th>\n",
       "      <td>2420</td>\n",
       "      <td>Soil</td>\n",
       "      <td>Scan9</td>\n",
       "      <td>Shano</td>\n",
       "      <td>50.861633</td>\n",
       "      <td>0.075516</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17833</th>\n",
       "      <td>2430</td>\n",
       "      <td>Soil</td>\n",
       "      <td>Scan9</td>\n",
       "      <td>Shano</td>\n",
       "      <td>50.582052</td>\n",
       "      <td>0.075516</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17834</th>\n",
       "      <td>2440</td>\n",
       "      <td>Soil</td>\n",
       "      <td>Scan9</td>\n",
       "      <td>Shano</td>\n",
       "      <td>50.438838</td>\n",
       "      <td>0.075516</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17835</th>\n",
       "      <td>2450</td>\n",
       "      <td>Soil</td>\n",
       "      <td>Scan9</td>\n",
       "      <td>Shano</td>\n",
       "      <td>49.054562</td>\n",
       "      <td>0.075516</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>17836 rows Ã— 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        Wvl Sample   Scan Type_Name    Reflect       RWC\n",
       "0       500   Soil  Scan1    Athena   1.741691  1.000000\n",
       "1       510   Soil  Scan1    Athena   1.814396  1.000000\n",
       "2       520   Soil  Scan1    Athena   1.840588  1.000000\n",
       "3       530   Soil  Scan1    Athena   1.893957  1.000000\n",
       "4       540   Soil  Scan1    Athena   1.990206  1.000000\n",
       "...     ...    ...    ...       ...        ...       ...\n",
       "17831  2410   Soil  Scan9     Shano  51.931447  0.075516\n",
       "17832  2420   Soil  Scan9     Shano  50.861633  0.075516\n",
       "17833  2430   Soil  Scan9     Shano  50.582052  0.075516\n",
       "17834  2440   Soil  Scan9     Shano  50.438838  0.075516\n",
       "17835  2450   Soil  Scan9     Shano  49.054562  0.075516\n",
       "\n",
       "[17836 rows x 6 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "path_to_data = (\"/Users/aminnorouzi/Library/CloudStorage/\"\n",
    "                \"OneDrive-WashingtonStateUniversity(email.wsu.edu)\"\n",
    "                \"/Ph.D/Projects/Spectroscopy_Paper/Data/10nm_res_individual/\")\n",
    "# path_to_data = \"/home/amnnrz/GoogleDrive - msaminnorouzi/PhD/Projects/Spectroscopy paper/EPO/\"\n",
    "\n",
    "soil_df = pd.read_csv(path_to_data + \"Soil.csv\")\n",
    "soil_df = soil_df.drop(columns=['Unnamed: 0', 'EPO_Reflect'])\n",
    "soil_df.rename({'Soil': 'Type_Name'}, axis=1, inplace=True)\n",
    "colnames = ['Wvl', 'Sample', 'Scan', 'Type_Name', 'Reflect', 'RWC']\n",
    "soil_df = soil_df[colnames]\n",
    "soil_df\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Athena\n",
      "(196, 8) x_wd.shape\n",
      "0.088834419 min(X.columns)\n",
      "Bagdad\n",
      "(196, 7) x_wd.shape\n",
      "0.09512557 min(X.columns)\n",
      "Benwy\n",
      "(196, 8) x_wd.shape\n",
      "0.128877246 min(X.columns)\n",
      "Broadax\n",
      "(196, 9) x_wd.shape\n",
      "0.090355582 min(X.columns)\n",
      "Endicott\n",
      "(196, 7) x_wd.shape\n",
      "0.094090901 min(X.columns)\n",
      "Lance\n",
      "(196, 7) x_wd.shape\n",
      "0.15296525 min(X.columns)\n",
      "Mondovi 1\n",
      "(196, 7) x_wd.shape\n",
      "0.089692109 min(X.columns)\n",
      "Mondovi 2\n",
      "(196, 8) x_wd.shape\n",
      "0.115771878 min(X.columns)\n",
      "Oxy\n",
      "(196, 7) x_wd.shape\n",
      "0.125962176 min(X.columns)\n",
      "Palouse\n",
      "(196, 6) x_wd.shape\n",
      "0.096725708 min(X.columns)\n",
      "Ritzville\n",
      "(196, 8) x_wd.shape\n",
      "0.065252262 min(X.columns)\n",
      "Shano\n",
      "(196, 9) x_wd.shape\n",
      "0.075515889 min(X.columns)\n",
      "(79, 79) U.shape\n",
      "(79,) S.shape\n",
      "(79, 79) V.shape\n",
      "(79, 79) Q.shape\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Wvl</th>\n",
       "      <th>Scan</th>\n",
       "      <th>RWC</th>\n",
       "      <th>Reflect</th>\n",
       "      <th>Crop</th>\n",
       "      <th>Sample</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>500</td>\n",
       "      <td>Scan8</td>\n",
       "      <td>0.230918</td>\n",
       "      <td>3.486821</td>\n",
       "      <td>Athena</td>\n",
       "      <td>Soil</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>510</td>\n",
       "      <td>Scan8</td>\n",
       "      <td>0.230918</td>\n",
       "      <td>3.666557</td>\n",
       "      <td>Athena</td>\n",
       "      <td>Soil</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>520</td>\n",
       "      <td>Scan8</td>\n",
       "      <td>0.230918</td>\n",
       "      <td>3.842752</td>\n",
       "      <td>Athena</td>\n",
       "      <td>Soil</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>530</td>\n",
       "      <td>Scan8</td>\n",
       "      <td>0.230918</td>\n",
       "      <td>4.042211</td>\n",
       "      <td>Athena</td>\n",
       "      <td>Soil</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>540</td>\n",
       "      <td>Scan8</td>\n",
       "      <td>0.230918</td>\n",
       "      <td>4.247166</td>\n",
       "      <td>Athena</td>\n",
       "      <td>Soil</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15479</th>\n",
       "      <td>2410</td>\n",
       "      <td>Scan1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>19.041105</td>\n",
       "      <td>Shano</td>\n",
       "      <td>Soil</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15480</th>\n",
       "      <td>2420</td>\n",
       "      <td>Scan1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>18.376153</td>\n",
       "      <td>Shano</td>\n",
       "      <td>Soil</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15481</th>\n",
       "      <td>2430</td>\n",
       "      <td>Scan1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>17.986090</td>\n",
       "      <td>Shano</td>\n",
       "      <td>Soil</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15482</th>\n",
       "      <td>2440</td>\n",
       "      <td>Scan1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>17.747569</td>\n",
       "      <td>Shano</td>\n",
       "      <td>Soil</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15483</th>\n",
       "      <td>2450</td>\n",
       "      <td>Scan1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>16.975020</td>\n",
       "      <td>Shano</td>\n",
       "      <td>Soil</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>15484 rows Ã— 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        Wvl   Scan       RWC    Reflect    Crop Sample\n",
       "0       500  Scan8  0.230918   3.486821  Athena   Soil\n",
       "1       510  Scan8  0.230918   3.666557  Athena   Soil\n",
       "2       520  Scan8  0.230918   3.842752  Athena   Soil\n",
       "3       530  Scan8  0.230918   4.042211  Athena   Soil\n",
       "4       540  Scan8  0.230918   4.247166  Athena   Soil\n",
       "...     ...    ...       ...        ...     ...    ...\n",
       "15479  2410  Scan1       1.0  19.041105   Shano   Soil\n",
       "15480  2420  Scan1       1.0  18.376153   Shano   Soil\n",
       "15481  2430  Scan1       1.0  17.986090   Shano   Soil\n",
       "15482  2440  Scan1       1.0  17.747569   Shano   Soil\n",
       "15483  2450  Scan1       1.0  16.975020   Shano   Soil\n",
       "\n",
       "[15484 rows x 6 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#== Apply EPO to all crops ==#\n",
    "D = pd.DataFrame([])\n",
    "X_wet = pd.DataFrame([])\n",
    "res_df_WET = pd.DataFrame([])\n",
    "for r in soil_df['Type_Name'].unique():\n",
    "    print(r)\n",
    "    #== Apply EPO for all Crops ==#\n",
    "    res_df = soil_df[soil_df['Type_Name'] == f'{r}'].copy()\n",
    "    res_df_wet = res_df.loc[~(res_df['RWC'] == min(res_df['RWC']))]\n",
    "    res_df_wet = res_df_wet.sort_values(by='RWC')\n",
    "    res_df_WET = pd.concat([res_df_WET, res_df_wet])\n",
    "    res_df_WET = res_df_WET.reset_index(drop=True)\n",
    "\n",
    "    x_wd = res_df.pivot(index=['Wvl'], columns='RWC', values='Reflect')\n",
    "    # reordered_cols = ['rwc=1.12', 'rwc=1', 'rwc=0.86', 'rwc=0.73',  'rwc=0.65', 'rwc=0.39','rwc=0.16']\n",
    "    # x_wd = x_wd[reordered_cols]\n",
    "    print(x_wd.shape, \"x_wd.shape\")\n",
    "\n",
    "    #== Apply EPO ==#\n",
    "    X = x_wd/100\n",
    "\n",
    "    print(min(X.columns), \"min(X.columns)\")\n",
    "    x_wet = X.drop(min(X.columns), axis=1)\n",
    "    X_wet = pd.concat([X_wet, x_wet], axis=1)\n",
    "    d = x_wet.sub(X[min(X.columns)], axis='index')\n",
    "    d = -d\n",
    "\n",
    "    # Add Type_Name row\n",
    "    Type_Name = pd.DataFrame({'Type_Name': [r] * d.shape[1]}).T\n",
    "    Type_Name.columns = d.columns\n",
    "    d = pd.concat([d, Type_Name])\n",
    "\n",
    "    # Add Sample row\n",
    "    Sample = pd.DataFrame(\n",
    "        {'Sample': [res_df['Sample'].iloc[0]] * d.shape[1]}).T\n",
    "    Sample.columns = d.columns\n",
    "    d = pd.concat([d, Sample])\n",
    "\n",
    "    # Add Scan row\n",
    "    Scan = pd.DataFrame(\n",
    "        {'Scan': res_df['Scan'].unique()[::-1]}).T.drop(columns=0)\n",
    "    Scan.columns = d.columns\n",
    "    d = pd.concat([d, Scan])\n",
    "\n",
    "    D = pd.concat([D, d], axis=1)\n",
    "DD = D.apply(pd.to_numeric, errors='coerce')\n",
    "# Perform a singular value decompostion on D(D.T)\n",
    "U, S, V = np.linalg.svd(np.array(DD.iloc[:-3].T @ DD.iloc[:-3]))\n",
    "print(U.shape, 'U.shape')\n",
    "print(S.shape, 'S.shape')\n",
    "print(V.shape, 'V.shape')\n",
    "\n",
    "Vs = V[:, 0:2]\n",
    "Q = Vs@Vs.T\n",
    "print(Q.shape, 'Q.shape')\n",
    "\n",
    "P = np.ones([Q.shape[0], Q.shape[0]]) - Q\n",
    "P.shape\n",
    "\n",
    "X_raw = X_wet\n",
    "X_transformed = X_raw @ P\n",
    "\n",
    "X_transformed.columns = X_wet.columns\n",
    "X_transformed\n",
    "\n",
    "# # # add driest column\n",
    "# # X_transformed[min(X.columns)] = X[min(X.columns)]\n",
    "\n",
    "# X_transformed.sort_index(axis=1, inplace=True)\n",
    "\n",
    "# Create a copy of X_wd to avoid modifying the original DataFrame\n",
    "X_transformed_copy = X_transformed.copy()\n",
    "\n",
    "# Reset the index to make 'Wvl' a column again\n",
    "X_transformed_copy.reset_index(inplace=True)\n",
    "\n",
    "df_transformed = pd.melt(X_transformed_copy, id_vars=[\n",
    "                         'Wvl'], var_name='RWC', value_name='Reflect')\n",
    "df_transformed\n",
    "\n",
    "df_transformed['Sample'] = res_df_WET['Sample']\n",
    "df_transformed['Type_Name'] = res_df_WET['Type_Name']\n",
    "df_transformed['Scan'] = res_df_WET['Scan']\n",
    "\n",
    "desired_column_order = ['Wvl', 'Scan', 'RWC', 'Reflect', 'Type_Name', 'Sample']\n",
    "df_transformed = df_transformed[desired_column_order]\n",
    "df_transformed.rename(columns={'Type_Name': 'Crop'}, inplace=True)\n",
    "df_transformed\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "df_transformed.to_csv(\n",
    "    path_to_data + 'Soil_Transformed__Dmerged.csv', index=False)"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,py:light"
  },
  "kernelspec": {
   "display_name": "tillenv",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
