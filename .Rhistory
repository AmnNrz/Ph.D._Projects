theme(text = element_text(size = 20),legend.position = c(0.8, 0.2),
legend.title=element_blank(),
legend.margin=margin(c(1,5,5,5)))
##################################################################
##################################################################
##################################################################
a <- data.frame()
b <- data.frame()
c <- data.frame()
d <- data.frame()
e <- data.frame()
f <- data.frame()
for (i in length(unique(CAI$Scan))) {
a <- dplyr::filter(CAI, Sample == "Soil")
b <- dplyr::filter(CAI, Sample == "Residue")
for (j in unique(a$Type)) {
c <- dplyr::filter(a, Type == j)
d <- merge(c, b, by.x = "Scan", by.y = "Scan")
e <- rbind(e, d)
}
f <- rbind(f, e)
}
test1_SINDRI <- f
for (i in fractions){
colname <-  paste0("CAI_", i)
test1_SINDRI[[colname]] <- test1_SINDRI$SINDRI.x * (1 - i) + test1_SINDRI$SINDRI.y * i
}
test2_SINDRI <- dplyr::filter(test1_SINDRI, Type.x == sl & Type.y == crp)
test3_SINDRI <- test2_SINDRI[c(24,42:length(test2_NDTI))] ## select the conven,med,conser colums
test3_SINDRI <- reshape2::melt(test3_SINDRI, id = "RWC.y")
for (i in fractions){
pattern <- paste0("CAI_", i)
test3_SINDRI$variable <- gsub(pattern, i, test3_SINDRI$variable)
# test3_SINDRI$variable <- as.numeric(test3_SINDRI$variable)
}
names(test3_SINDRI)[2] <- "Fraction_Residue_Cover"
names(test3_SINDRI)[3] <- "CAI"
write.csv(test3_SINDRI, paste0(path_to_save, "SINDRI_Original_", crp, "_", gsub("_", " ", sl),  ".csv"), row.names = FALSE)
##Fig5
ggplot(test3_SINDRI, aes(CAI, Fraction_Residue_Cover, group = factor(RWC.y))) +
geom_line(aes(color = factor(RWC.y))) +
geom_point(aes(shape = factor(RWC.y)))+
labs(y = "Fraction Residue Cover", x = "SINDRI") +
scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, by = 0.2)) +
theme(text = element_text(size = 20),legend.position = c(0.8, 0.2),
legend.title=element_blank(),
legend.margin=margin(c(1,5,5,5)))
}
}
# Load the reshape2 package
library(reshape2)
library(dplyr)
library(ggplot2)
library(viridis)
library(scales)
# Set the path to directory
# path_to_data <- paste0('/home/amnnrz/OneDrive - a.norouzikandelati/Ph.D/',
#                        'Projects/Soil_Residue_Spectroscopy/Data/',
#                        '10nm_resolution/index_org_trsfed_crp_sl/')
#
# path_to_plots <- paste0('/home/amnnrz/OneDrive - a.norouzikandelati/Ph.D/',
#                         'Projects/Soil_Residue_Spectroscopy/Plots/',
#                         '10nm_resolution/FR_Index_newBands2/')
path_to_data <- paste0('/Users/aminnorouzi/Library/CloudStorage/',
'OneDrive-WashingtonStateUniversity(email.wsu.edu)/Ph.D/',
'Projects/Soil_Residue_Spectroscopy/Data/',
'10nm_resolution/index_org_trsfed_crp_sl/')
path_to_plots <- paste0('/Users/aminnorouzi/Library/CloudStorage/',
'OneDrive-WashingtonStateUniversity(email.wsu.edu)/Ph.D/',
'Projects/Soil_Residue_Spectroscopy/Plots/',
'10nm_resolution/FR_Index_newBands2/')
# Get a list of all .csv files in the directory
csv_files <- list.files(path = path_to_data, pattern = "\\.csv$", full.names = FALSE)
# Remove the ".csv" extension from the file names
csv_files <- sub("\\.csv$", "", csv_files)
# Extract characters after the second underscore
csv_files <- sapply(strsplit(csv_files, "_"), function(x) paste(tail(x, -2), collapse = "_"))
print(unique(csv_files))
##################################################################
##################################################################
##################################################################
########################### AFTER EPO ###########################
##################################################################
##################################################################
##################################################################
for (name in unique(csv_files)) {
NDTI_transformed <- read.csv(paste0(path_to_data, 'NDTI_transformed_',name, '.csv'))
NDTI_original <- read.csv(paste0(path_to_data, 'NDTI_Original_', name, '.csv'))
CAI_transformed <- read.csv(paste0(path_to_data, 'CAI_transformed_', name, '.csv'))
CAI_original <- read.csv(paste0(path_to_data, 'CAI_Original_', name, '.csv'))
SINDRI_transformed <- read.csv(paste0(path_to_data, 'SINDRI_transformed_', name, '.csv'))
SINDRI_original <- read.csv(paste0(path_to_data, 'SINDRI_Original_', name, '.csv'))
##Fig5
ggplot(NDTI_transformed, aes(CAI, Fraction_Residue_Cover, group = factor(RWC.y))) +
geom_line(aes(color = factor(RWC.y))) +
geom_point(aes(shape = factor(RWC.y)))+
labs(y = "Fraction Residue Cover", x = "NDTI") +
scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, by = 0.2)) +
theme(text = element_text(size = 20),legend.position = c(0.8, 0.2),
legend.title=element_blank(),
legend.margin=margin(c(1,5,5,5)))
##################################################################
##################################################################
##################################################################
##Fig5
ggplot(CAI_transformed, aes(CAI, Fraction_Residue_Cover, group = factor(RWC.y))) +
geom_line(aes(color = factor(RWC.y))) +
geom_point(aes(shape = factor(RWC.y)))+
labs(y = "Fraction Residue Cover", x = "CAI") +
scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, by = 0.2)) +
theme(text = element_text(size = 20),legend.position = c(0.8, 0.2),
legend.title=element_blank(),
legend.margin=margin(c(1,5,5,5)))
##################################################################
##################################################################
##################################################################
##Fig5
ggplot(SINDRI_transformed, aes(CAI, Fraction_Residue_Cover, group = factor(RWC.y))) +
geom_line(aes(color = factor(RWC.y))) +
geom_point(aes(shape = factor(RWC.y)))+
labs(y = "Fraction Residue Cover", x = "SINDRI") +
scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, by = 0.2)) +
theme(text = element_text(size = 20),legend.position = c(0.8, 0.2),
legend.title=element_blank(),
legend.margin=margin(c(1,5,5,5)))
##################################################################
##################################################################
##################################################################
########################### BEFORE EPO ###########################
##################################################################
##################################################################
##################################################################
##Fig5
ggplot(NDTI_original, aes(CAI, Fraction_Residue_Cover, group = factor(RWC.y))) +
geom_line(aes(color = factor(RWC.y))) +
geom_point(aes(shape = factor(RWC.y)))+
labs(y = "Fraction Residue Cover", x = "NDTI") +
scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, by = 0.2)) +
theme(text = element_text(size = 20),legend.position = c(0.8, 0.2),
legend.title=element_blank(),
legend.margin=margin(c(1,5,5,5)))
##################################################################
##################################################################
##################################################################
##Fig5
ggplot(CAI_original, aes(CAI, Fraction_Residue_Cover, group = factor(RWC.y))) +
geom_line(aes(color = factor(RWC.y))) +
geom_point(aes(shape = factor(RWC.y)))+
labs(y = "Fraction Residue Cover", x = "CAI") +
scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, by = 0.2)) +
theme(text = element_text(size = 20),legend.position = c(0.8, 0.2),
legend.title=element_blank(),
legend.margin=margin(c(1,5,5,5)))
##################################################################
##################################################################
##################################################################
##Fig5
ggplot(SINDRI_original, aes(CAI, Fraction_Residue_Cover, group = factor(RWC.y))) +
geom_line(aes(color = factor(RWC.y))) +
geom_point(aes(shape = factor(RWC.y)))+
labs(y = "Fraction Residue Cover", x = "SINDRI") +
scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, by = 0.2)) +
theme(text = element_text(size = 20),legend.position = c(0.8, 0.2),
legend.title=element_blank(),
legend.margin=margin(c(1,5,5,5)))
# Combine the datasets
# For NDTI
NDTI_transformed$index <- 'After EPO'
NDTI_transformed$type <- 'NDTI'
NDTI_original$index <- 'Before EPO'
NDTI_original$type <- 'NDTI'
# For CAI
CAI_transformed$index <- 'After EPO'
CAI_transformed$type <- 'CAI'
CAI_original$index <- 'Before EPO'
CAI_original$type <- 'CAI'
# For SINDRI
SINDRI_transformed$index <- 'After EPO'
SINDRI_transformed$type <- 'SINDRI'
SINDRI_original$index <- 'Before EPO'
SINDRI_original$type <- 'SINDRI'
SINDRI_transformed$CAI <- SINDRI_transformed$CAI/100
# Combine all datasets into one
combined_data <- rbind(NDTI_original, NDTI_transformed, CAI_original, CAI_transformed, SINDRI_original, SINDRI_transformed)
# Change the order of levels of 'index'
combined_data$index <- factor(combined_data$index, levels = c('Before EPO', 'After EPO'))
# Get all unique RWC levels from both dataframes
all_rwc_levels <- unique(c(combined_data$RWC.y))
# Create a color palette with enough colors for all RWC levels
custom_colors <- viridis(length(all_rwc_levels))
custom_colors <- rev(custom_colors)
# Plotting
ggplot(combined_data, aes(CAI, Fraction_Residue_Cover, group = factor(RWC.y))) +
geom_line(aes(color = factor(RWC.y))) +
geom_point(aes(shape = factor(RWC.y), color = factor(RWC.y))) +
scale_color_manual(values = custom_colors, name = "RWC Levels") +  # Set legend title here
labs(title = paste0("'", strsplit(name, "_")[[1]][1], "'"," ", "on", " ", "'", strsplit(name, "_")[[1]][2], "'"),
y = "Fraction Residue Cover") +  # Removed the 'shape' title here
xlab("") +  # Set X axis label to an empty string to remove it
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5),  # This line centers the title
panel.background = element_rect(fill = "white"),
plot.background = element_rect(fill = "white"),
panel.grid.major = element_blank(),           # Remove major grid lines
panel.grid.minor = element_blank(),           # Remove minor grid lines
strip.background = element_rect(fill = "white"), # Remove facet strip background
axis.text = element_text(size = 10),
axis.title = element_text(size = 14),
legend.text = element_text(size = 12),
legend.position = "right",
legend.margin = margin(c(1, 5, 5, 5)),
legend.key.size = unit(0.4, "cm"),
axis.text.x = element_text(angle = 45, hjust = 1)  # Rotate x-axis text to 45 degrees
) +
facet_wrap(index ~ type,scales = "free")+
guides(
shape = FALSE,  # Remove the shape legend
color = guide_legend(
override.aes = list(shape = 1:length(custom_colors))  # Set the shapes in the legend
)
)
# Save the figure as a PDF with A5 size (width = 14.8 cm, height = 21 cm)
ggsave(paste0(path_to_plots, name, ".png"), width = 22, height = 14.8, units = "cm")
}
library(tidyverse)
library(dplyr)
library(ggplot2)
library(viridis)
library(ComplexUpset)
# setwd(paste0('/Users/aminnorouzi/Documents/GitHub/spectroscopy_paper/',
#              'Codes/10nm_resolution/individual'))
setwd(paste0('/home/amnnrz/Documents/GitHub/',
'spectroscopy_paper/Codes/10nm_resolution/individual/'))
source("epo_module.R")
path_to_data <- paste0('/home/amnnrz/OneDrive - a.norouzikandelati/Ph.D/',
'Projects/Soil_Residue_Spectroscopy/Data/10nm_resolution/')
path_to_plots <- paste0('/home/amnnrz/OneDrive - a.norouzikandelati/Ph.D/',
'Projects/Soil_Residue_Spectroscopy/Plots/10nm_resolution/')
mixed_original <- read.csv(paste0(path_to_data, 'mixed_original.csv'),
check.names = FALSE)
mixed_original$Type <- paste0(
mixed_original$Crop, "_", mixed_original$Soil)
mixed_original <- mixed_original %>%
mutate(RWC_ave = (
mixed_original$crop_rwc + mixed_original$soil_rwc) / 2)
mixed_original$Scan <- mixed_original$Scan
mixed_original <- mixed_original %>%
select(-Fraction, everything(), Fraction) %>%
select(c("crop_rwc", "soil_rwc", "Scan", "500":ncol(mixed_original))) %>%
select("Type", "RWC_ave", "Fraction", "Scan", everything())
mixed_original <- mixed_original %>%
pivot_longer(cols = '500':names(mixed_original)[ncol(mixed_original)],
names_to = 'Wvl',
values_to = 'Reflect')
# Read raw data
Residue <- read.csv(paste0(path_to_data,
"Residue.csv"),
header = TRUE, row.names = NULL)
Residue <- Residue[-c(1, 8)]
Soil <- read.csv(paste0(path_to_data,
"Soil.csv"),
header = TRUE, row.names = NULL)
Soil <- Soil[-c(1, 8)]
Residue <- Residue %>%
rename(Type = Soil)
Soil <- Soil %>%
rename(Type = Soil)
Residue <- Residue %>%
mutate(Sample = recode(Sample, "Crop Residue" = "Residue"))
# Select common Wvls
Residue <- Residue[Residue$Wvl %in% Soil$Wvl, ]
Soil <- Soil[Soil$Wvl %in% Residue$Wvl, ]
length(unique(Residue$Wvl))
length(unique(Soil$Wvl))
Residue <- Residue %>% select(-Scan)
Soil <- Soil %>% select(-Scan)
# Calculate Xsr_hat
crops <- unique(Residue$Type)
soils <- unique(Soil$Type)
crp <- crops[1]
sl <- soils[1]
fresh_crops <- c("Canola", "Garbanzo Beans", "Peas",
"Wheat Norwest Duet", "Wheat Pritchett")
weathered_crops <- c("Weathered Canola",  "Weathered Wheat")
dark_soils <- c("Bagdad", "Mondovi 1", "Athena")
light_soils <- c("Benwy", "Shano", "Lance")
fresh_dark <- expand.grid(fresh_crops, dark_soils)
fresh_dark$mix <- paste(fresh_dark$Var1, fresh_dark$Var2, sep = "_")
fresh_dark <- fresh_dark %>% select(-c(1,2))
fresh_light <- expand.grid(fresh_crops, light_soils)
fresh_light$mix <- paste(fresh_light$Var1, fresh_light$Var2, sep = "_")
fresh_light <- fresh_light %>% select(-c(1,2))
weathered_light <- expand.grid(weathered_crops, light_soils)
weathered_light$mix <- paste(weathered_light$Var1, weathered_light$Var2, sep = "_")
weathered_light <- weathered_light %>% select(-c(1,2))
weathered_dark <- expand.grid(weathered_crops, dark_soils)
weathered_dark$mix <- paste(weathered_dark$Var1, weathered_dark$Var2, sep = "_")
weathered_dark <- weathered_dark %>% select(-c(1,2))
select_rwc <- function (more_unique_rwc, less_unique_rwc){
selected_rwc <- numeric(length(more_unique_rwc))
for (i in 1:length(less_unique_rwc)) {
rwc <- less_unique_rwc[i]
# Calculate the differences with the current list of soil RWC values
differences <- abs(more_unique_rwc - rwc)
# Find the index of the closest match
closest_index <- which.min(differences)
# Store the closest match
selected_rwc[i] <- more_unique_rwc[closest_index]
# Remove the selected closest RWC from the soil_rwc vector to prevent its future selection
more_unique_rwc <- more_unique_rwc[-closest_index]
}
return(selected_rwc)
}
RWC_common <- function(Residue, Soil, mixed_original, crop_group, soil_group){
Res_commonRWC_df <- data.frame()
Soil_commonRWC_df <- data.frame()
for (crp in crop_group){
print(sl)
for (sl in soil_group){
Res_rwc_filtered <- dplyr::filter(Residue, Type==crp)
Soil_rwc_filtered <- dplyr::filter(Soil, Type==sl)
mixed_original_filtered <-
dplyr::filter(mixed_original, Type== paste0(crp, "_", sl))
# print(length(unique(mixed_original_filtered$crop_rwc)))
# print(length(unique(mixed_original_filtered$soil_rwc)))
Res_rwc_filtered <- Res_rwc_filtered[
Res_rwc_filtered$RWC %in% mixed_original_filtered$crop_rwc,
]
Soil_rwc_filtered <- Soil_rwc_filtered[
Soil_rwc_filtered$RWC %in% mixed_original_filtered$soil_rwc,
]
# print(unique(Res_rwc_filtered$RWC))
print(unique(Soil_rwc_filtered$RWC))
Res_commonRWC_df <- rbind(Res_commonRWC_df, Res_rwc_filtered)
Soil_commonRWC_df <- rbind(Soil_commonRWC_df, Soil_rwc_filtered)
}
}
# Step 1: Get unique RWC values
res_rwc <- unique(Res_commonRWC_df$RWC)
soil_rwc <- unique(Soil_commonRWC_df$RWC)
if (length(res_rwc) >= length(soil_rwc)) {
more_unique_rwc <- res_rwc
less_unique_rwc <- soil_rwc
} else {
more_unique_rwc <- soil_rwc
less_unique_rwc <- res_rwc
}
selected_rwc <- select_rwc(more_unique_rwc, less_unique_rwc )
# Filter Soil_commonRWC_df to keep only rows with the selected closest RWC values
Soil_commonRWC_df <- Soil_commonRWC_df[Soil_commonRWC_df$RWC %in% selected_rwc, ]
return(list(df1 = Res_commonRWC_df, df2 = Soil_commonRWC_df))
}
crop_group <- fresh_crops
soil_group <- dark_soils
mix_group <- fresh_dark
get_df_name <- function(df) {
return(deparse(substitute(df)))
}
mix_group_name <- get_df_name(mix_group)
result <- RWC_common(Residue, Soil, mixed_original, crop_group, soil_group)
Res_commonRWC_df <- result$df1
Soil_commonRWC_df <- result$df2
print(length(unique(Res_commonRWC_df$RWC)))
print(length(unique(Soil_commonRWC_df$RWC)))
results_residue <- epo_scenario(Res_commonRWC_df, "Residue")
Pr <- results_residue$P
Qr <- results_residue$Q
results_soil <- epo_scenario(Soil_commonRWC_df, "Soil")
Ps <- results_soil$P
results_soil <- epo_scenario(Soil_commonRWC_df, "Soil")
results_soil <- epo_scenario(Soil_commonRWC_df, "Soil")
library(tidyverse)
library(dplyr)
library(ggplot2)
library(viridis)
library(ComplexUpset)
# setwd(paste0('/Users/aminnorouzi/Documents/GitHub/spectroscopy_paper/',
#              'Codes/10nm_resolution/individual'))
setwd(paste0('/home/amnnrz/Documents/GitHub/',
'spectroscopy_paper/Codes/10nm_resolution/individual/'))
source("epo_module.R")
path_to_data <- paste0('/home/amnnrz/OneDrive - a.norouzikandelati/Ph.D/',
'Projects/Soil_Residue_Spectroscopy/Data/10nm_resolution/')
path_to_plots <- paste0('/home/amnnrz/OneDrive - a.norouzikandelati/Ph.D/',
'Projects/Soil_Residue_Spectroscopy/Plots/10nm_resolution/')
mixed_original <- read.csv(paste0(path_to_data, 'mixed_original.csv'),
check.names = FALSE)
mixed_original$Type <- paste0(
mixed_original$Crop, "_", mixed_original$Soil)
mixed_original <- mixed_original %>%
mutate(RWC_ave = (
mixed_original$crop_rwc + mixed_original$soil_rwc) / 2)
mixed_original$Scan <- mixed_original$Scan
mixed_original <- mixed_original %>%
select(-Fraction, everything(), Fraction) %>%
select(c("crop_rwc", "soil_rwc", "Scan", "500":ncol(mixed_original))) %>%
select("Type", "RWC_ave", "Fraction", "Scan", everything())
mixed_original <- mixed_original %>%
pivot_longer(cols = '500':names(mixed_original)[ncol(mixed_original)],
names_to = 'Wvl',
values_to = 'Reflect')
# Read raw data
Residue <- read.csv(paste0(path_to_data,
"Residue.csv"),
header = TRUE, row.names = NULL)
Residue <- Residue[-c(1, 8)]
Soil <- read.csv(paste0(path_to_data,
"Soil.csv"),
header = TRUE, row.names = NULL)
Soil <- Soil[-c(1, 8)]
Residue <- Residue %>%
rename(Type = Soil)
Soil <- Soil %>%
rename(Type = Soil)
Residue <- Residue %>%
mutate(Sample = recode(Sample, "Crop Residue" = "Residue"))
# Select common Wvls
Residue <- Residue[Residue$Wvl %in% Soil$Wvl, ]
Soil <- Soil[Soil$Wvl %in% Residue$Wvl, ]
length(unique(Residue$Wvl))
length(unique(Soil$Wvl))
Residue <- Residue %>% select(-Scan)
Soil <- Soil %>% select(-Scan)
# Calculate Xsr_hat
crops <- unique(Residue$Type)
soils <- unique(Soil$Type)
crp <- crops[1]
sl <- soils[1]
fresh_crops <- c("Canola", "Garbanzo Beans", "Peas",
"Wheat Norwest Duet", "Wheat Pritchett")
weathered_crops <- c("Weathered Canola",  "Weathered Wheat")
dark_soils <- c("Bagdad", "Mondovi 1", "Athena")
light_soils <- c("Benwy", "Shano", "Lance")
fresh_dark <- expand.grid(fresh_crops, dark_soils)
fresh_dark$mix <- paste(fresh_dark$Var1, fresh_dark$Var2, sep = "_")
fresh_dark <- fresh_dark %>% select(-c(1,2))
fresh_light <- expand.grid(fresh_crops, light_soils)
fresh_light$mix <- paste(fresh_light$Var1, fresh_light$Var2, sep = "_")
fresh_light <- fresh_light %>% select(-c(1,2))
weathered_light <- expand.grid(weathered_crops, light_soils)
weathered_light$mix <- paste(weathered_light$Var1, weathered_light$Var2, sep = "_")
weathered_light <- weathered_light %>% select(-c(1,2))
weathered_dark <- expand.grid(weathered_crops, dark_soils)
weathered_dark$mix <- paste(weathered_dark$Var1, weathered_dark$Var2, sep = "_")
weathered_dark <- weathered_dark %>% select(-c(1,2))
select_rwc <- function (more_unique_rwc, less_unique_rwc){
selected_rwc <- numeric(length(more_unique_rwc))
for (i in 1:length(less_unique_rwc)) {
rwc <- less_unique_rwc[i]
# Calculate the differences with the current list of soil RWC values
differences <- abs(more_unique_rwc - rwc)
# Find the index of the closest match
closest_index <- which.min(differences)
# Store the closest match
selected_rwc[i] <- more_unique_rwc[closest_index]
# Remove the selected closest RWC from the soil_rwc vector to prevent its future selection
more_unique_rwc <- more_unique_rwc[-closest_index]
}
return(selected_rwc)
}
RWC_common <- function(Residue, Soil, mixed_original, crop_group, soil_group){
Res_commonRWC_df <- data.frame()
Soil_commonRWC_df <- data.frame()
for (crp in crop_group){
print(sl)
for (sl in soil_group){
Res_rwc_filtered <- dplyr::filter(Residue, Type==crp)
Soil_rwc_filtered <- dplyr::filter(Soil, Type==sl)
mixed_original_filtered <-
dplyr::filter(mixed_original, Type== paste0(crp, "_", sl))
# print(length(unique(mixed_original_filtered$crop_rwc)))
# print(length(unique(mixed_original_filtered$soil_rwc)))
Res_rwc_filtered <- Res_rwc_filtered[
Res_rwc_filtered$RWC %in% mixed_original_filtered$crop_rwc,
]
Soil_rwc_filtered <- Soil_rwc_filtered[
Soil_rwc_filtered$RWC %in% mixed_original_filtered$soil_rwc,
]
# print(unique(Res_rwc_filtered$RWC))
print(unique(Soil_rwc_filtered$RWC))
Res_commonRWC_df <- rbind(Res_commonRWC_df, Res_rwc_filtered)
Soil_commonRWC_df <- rbind(Soil_commonRWC_df, Soil_rwc_filtered)
}
}
# Step 1: Get unique RWC values
res_rwc <- unique(Res_commonRWC_df$RWC)
soil_rwc <- unique(Soil_commonRWC_df$RWC)
if (length(res_rwc) >= length(soil_rwc)) {
more_unique_rwc <- res_rwc
less_unique_rwc <- soil_rwc
} else {
more_unique_rwc <- soil_rwc
less_unique_rwc <- res_rwc
}
selected_rwc <- select_rwc(more_unique_rwc, less_unique_rwc )
# Filter Soil_commonRWC_df to keep only rows with the selected closest RWC values
Soil_commonRWC_df <- Soil_commonRWC_df[Soil_commonRWC_df$RWC %in% selected_rwc, ]
return(list(df1 = Res_commonRWC_df, df2 = Soil_commonRWC_df))
}
crop_group <- fresh_crops
soil_group <- dark_soils
mix_group <- fresh_dark
get_df_name <- function(df) {
return(deparse(substitute(df)))
}
mix_group_name <- get_df_name(mix_group)
result <- RWC_common(Residue, Soil, mixed_original, crop_group, soil_group)
Res_commonRWC_df <- result$df1
Soil_commonRWC_df <- result$df2
print(length(unique(Res_commonRWC_df$RWC)))
print(length(unique(Soil_commonRWC_df$RWC)))
